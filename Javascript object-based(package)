Javascript是一种基于对象（object-based）的语言，你遇到的所有东西几乎都是对象。
但是，它又不是一种真正的面向对象编程（OOP）语言，因为它的语法中没有class（类）。
为了解决从原型对象生成实例的问题，Javascript提供了一个构造函数（Constructor）模式。
所谓“构造函数”，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就成生成实例，
并且this变量会绑定在实例对象上。

function Cat(name, color) {
  this.name = name;
  this.color = color;
}

生成实例对象:
var cat = new Cat("大黄", "黄色");
alert(cat.name); alert(cat.color);

这时cat会自动含有一个constructor属性,指向它的构造函数。
cat.constructor == Cat; 

Javascript还提供了一个instanceof运算符，验证原型对象与实例对象之间的关系。
cat instanceof Cat // true

构造函数方法很好用，但是存在一个浪费内存的问题。

function Cat(name,color){
  this.name = name;
  this.color = color;
  this.type = "猫科动物";
  this.eat = function(){alert("吃老鼠");};
}

var cat1 = new Cat("大毛","黄色");
var cat2 = new Cat ("二毛","黑色");

对于每一个实例对象，type属性和eat()方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。

alert(cat1.eat == cat2.eat); //false

能不能让type属性和eat()方法在内存中只生成一次，然后所有实例都指向那个内存地址呢？回答是可以的。

Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。
这个对象的所有属性和方法，都会被构造函数的实例继承。

我们可以把那些不变的属性和方法，直接定义在prototype对象上。

function Cat(name,color){
  this.name = name;
  this.color = color;
}

Cat.prototype.type = "猫科动物";
Cat.prototype.eat = function() {alert("吃老鼠")};

var cat1 = new Cat("大毛","黄色");
var cat2 = new Cat("二毛","黑色");
alert(cat1.type); // 猫科动物
cat1.eat(); // 吃老鼠

这时所有实例的type属性和eat()方法，其实都是同一个内存地址，指向prototype对象，因此就提高了运行效率。
alert(cat1.eat == cat2.eat); //true

为了配合prototype属性，Javascript定义了一些辅助方法，帮助我们使用它。

(1)isPrototypeyOf()用来判断某个prototype对象和某个实例之间的关系。
  Cat.prototype.isPrototypeOf(cat1); //true
  Cat.prototype.isPrototypeOf(cat2); //true

(2)hasOwnProperty() 每个实例对象都有一个hasOwnProperty()方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。
  alert(cat1.hasOwnProperty('name')); // true
  alert(cat2.hasOwnProperty('type')); // fasle
 
(3)in运算符 判断某个实例是否含有某个属性，不管是不是本地属性。
  alert('name' in cat1); // true
  alert('type' in cat2); // true
  in运算符还可以用来遍历某个对象的所有属性。
  for(var prop in cat1) {alert("cat1["+prop+"]="+cat1[prop]);}



